plugins {
    id 'java-library'
    id 'maven-publish'
    id 'eclipse'
    alias(libs.plugins.license)
    alias(libs.plugins.gradleutils)
}

group = 'net.minecraftforge'
version = 'mohist-2.2.19'
print("Version: $version")

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    modularity.inferModulePath.set(true)
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven gradleutils.forgeMaven
}

dependencies {
    api(libs.bundles.asm)
    implementation(libs.unsafe)
}

configurations.all {
    outgoing {
        capability("net.minecraftforge:$project.name:$version") // For sub modules, they require the exact casing of the name
        capability("net.minecraftforge:securemodules:$version")
        capability("cpw.mods:securejarhandler:$version")
    }
}

changelog {
    from '0.9'
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title':    'SecureModules',
            'Specification-Vendor':   'Forge Development LLC',
            'Specification-Version':   gradleutils.gitInfo.tag,
            'Implementation-Title':   'SecureModules',
            'Implementation-Version':  project.version,
            'Implementation-Vendor':  'Forge Development LLC'
        ] as LinkedHashMap)
    }
}

tasks.register('writeManifest') {
    doLast {
        jar.manifest.writeTo(file('src/main/resources/META-INF/MANIFEST.MF'))
    }
}

eclipse {
    synchronizationTasks writeManifest
    autoBuildTasks writeManifest
}

license {
    header = file("LICENSE-header.txt")
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name.toLowerCase()
            version project.version
            from components.java
        }
    }

    repositories {
        mavenLocal()

        maven {
            name = "Mohist-Maven"
            setUrl("file:/maven/")
        }
    }
}


// Hack eclipse into knowing that the gradle deps are modules
eclipse.classpath {
    containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
    file.whenMerged { entries.findAll { it.kind == 'lib' || it.path == 'org.eclipse.buildship.core.gradleclasspathcontainer' }.each { it.entryAttributes['module'] = 'true' } }
}

allprojects {
    ext.VALID_VMS = [
        'Adoptium':  [16, 17, 18, 19, 20, 21, 22],
        'Amazon':    [16, 17, 18, 19, 20, 21, 22],
        'Azul':      (16..22),
        'BellSoft':  (16..22),
        'Graal_VM':  [16, 17,     19, 20, 21, 22],
        'IBM':       [16, 17, 18, 19, 20, 21    ],
        'Microsoft': [16, 17,             21    ],
        'Oracle':    (16..22),
        'SAP':       (16..22)
    ]
    //ext.VALID_VMS = [ 'Adoptium':  [16] ]
}